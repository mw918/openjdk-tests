<?xml version="1.0"?>

<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<project name="jck" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>Build STF based JCK Tests </description>

	<!-- set global properties for this build -->
	<property name="SYSTEMTEST_ROOT" value="${basedir}/../system" />
	<property name="DEST" value="${BUILD_ROOT}/jck" />
	<property name="SYSTEMTEST_BUILD_ROOT" value="${BUILD_ROOT}/system" />
	<property environment="env" />
	<propertyregex property="jck_short_version" input="${env.JCK_VERSION}" regexp="jck([^\.]*)" select="\1" casesensitive="false" />
	
	<condition property="git-prefix" value="git" else="https">
		<isset property="isZOS"/>
	</condition>
	
	<condition property="openjdk_systemtest_repo" value="${env.ADOPTOPENJDK_SYSTEMTEST_REPO}" else="${git-prefix}://github.com/AdoptOpenJDK/openjdk-systemtest.git">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_REPO"/>
	</condition>
	<condition property="openjdk_systemtest_branch" value="${env.ADOPTOPENJDK_SYSTEMTEST_BRANCH}" else="master">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_BRANCH"/>
	</condition>
	
	<condition property="stf_repo" value="${env.STF_REPO}" else="${git-prefix}://github.com/AdoptOpenJDK/stf.git">
		<isset property="env.STF_REPO"/>
	</condition>
	<condition property="stf_branch" value="${env.STF_BRANCH}" else="master">
		<isset property="env.STF_BRANCH"/>
	</condition>

	<condition property="jck_branch" value="${env.JCK_GIT_BRANCH}" else="master">
		<isset property="env.JCK_GIT_BRANCH"/>
	</condition>
	<target name="stage_jck_material">
		<!-- Starting downloading or updating JCK materials based on JCK GIT REPO and JCK VERSION-->
		<if>
			<not>
				<available file="${env.JCK_ROOT}" type="dir" />
			</not>
			<!-- jck materials don't exist, download them -->
			<then>
				<echo message="${env.JCK_ROOT} does not exist, 
					clone from ${env.JCK_GIT_REPO}, ${jck_branch} branch, to ${env.JCK_ROOT}" />
				<mkdir dir="${env.JCK_ROOT}/.." />
				<exec executable="git" dir="${env.JCK_ROOT}/.." failonerror="true">
					<arg value="clone" />
					<arg value="--depth" />
					<arg value="1" />
					<arg value="--single-branch" />
					<arg value="-b"/>
					<arg value="${jck_branch}"/>
					<arg value="${env.JCK_GIT_REPO}" />
				</exec>
			</then>
			<!-- jck materials exist, update jck materials if needed-->
			<else>
				<echo message="${env.JCK_ROOT} exists, deleting previously built natives..." />
				<delete includeemptydirs="true">
				    <fileset dir="${env.JCK_ROOT}/natives" includes="**/*"/>
				</delete>
				<echo message="Updating ${env.JCK_ROOT} with latest..." />
				<exec executable="git" dir="${env.JCK_ROOT}" failonerror="true">
					<arg value="pull" />
					<arg value="origin" />
					<arg value="master" />
				</exec>
			</else>
		</if>
	</target>

	<target name="init">
		<mkdir dir="${DEST}" />
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}" type="dir" />
			</not>
			<then>
				<mkdir dir="${SYSTEMTEST_BUILD_ROOT}" />
			</then>
		</if>
	</target>

	<target name="clone_stf">
		<echo message="Cloning from: ${stf_repo} -b ${stf_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${stf_branch}"/>
			<arg value="${stf_repo}"/>
		</exec>
		<echo message="SHA of the checked out STF materials:"/>
		<exec executable="git" failonerror="false">
			<arg value="ls-remote" />
			<arg value="${stf_repo}"/>
			<arg value="${stf_branch}"/>
		</exec>
	</target>

	<target name="clone_systemtest">
		<echo message="Cloning from: ${openjdk_systemtest_repo} -b ${openjdk_systemtest_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${openjdk_systemtest_branch}"/>
			<arg value="${openjdk_systemtest_repo}"/>
		</exec>
		<echo message="SHA of the checked out openjdk-systemtest materials:"/>
		<exec executable="git" failonerror="false">
			<arg value="ls-remote" />
			<arg value="${openjdk_systemtest_repo}"/>
			<arg value="${openjdk_systemtest_branch}"/>
		</exec>
	</target>

	<target name="check_systemtest" depends="init">
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/stf" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/stf does not exist, clone from GitHub" />
				<antcall target="clone_stf" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/stf exists, skip cloning" />
			</else>
		</if>
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/openjdk-systemtest" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest does not exist, clone from GitHub" />
				<antcall target="clone_systemtest" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest exists, skip cloning" />
			</else>
		</if>
	</target>

	<target name="prepare_systemtest_for_jck" depends="check_systemtest">
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build/" target="configure" inheritAll="false"></ant>
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build/" target="build" inheritAll="false"></ant>
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" target="build" inheritAll="false">
			<property name="jck_runtimes_src_dir" value="${env.JCK_ROOT}/JCK-runtime-${jck_short_version} "/>
			<property name="out_dir" value="${env.JCK_ROOT}/natives" />
		</ant>
	</target>

	<target name="dist" depends="prepare_systemtest_for_jck" description="generate the distribution">
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}/openjdk-systemtest" type="dir" />
			</not>
			<then>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/stf">
					<fileset dir="${SYSTEMTEST_ROOT}/stf" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/openjdk-systemtest">
					<fileset dir="${SYSTEMTEST_ROOT}/openjdk-systemtest" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/systemtest_prereqs/">
					<fileset dir="${basedir}/../systemtest_prereqs/" includes="**" />
				</copy>
			</then>
		</if>
		<copy todir="${DEST}">
			<fileset dir="${basedir}">
				<exclude name="jck_root/" />
				<exclude name="README.md" />
			</fileset>
		</copy>
		<copy todir="${env.JCK_ROOT}/">
			<fileset dir="${basedir}/../systemtest_prereqs/" includes="**" />
		</copy>
	</target>

	<target name="build">
		<if>
			<and>
				<isset property="env.JCK_ROOT" />
				<isset property="env.JCK_VERSION" />
				<isset property="env.JCK_GIT_REPO" />
			</and>
			<then>
				<echo>=== env.JCK_ROOT is set to ${env.JCK_ROOT} ===</echo>
				<echo>=== env.JCK_VERSION is set to ${env.JCK_VERSION} ===</echo>
				<echo>=== env.JCK_GIT_REPO is set to ${env.JCK_GIT_REPO} ===</echo>
				<echo>start staging jck materials</echo>
				<antcall target="stage_jck_material" inheritall="true" />
				<echo>start building stf, stf jck wrapper and jck itself</echo>
				<antcall target="dist" inheritall="true" />
			</then>
			<else>
				<fail message="env.JCK_ROOT: ${env.JCK_ROOT} or env.JCK_VERSION: ${env.JCK_VERSION} or env.JCK_GIT_REPO: ${env.JCK_GIT_REPO}
					was not corretly set. If you do not want to compile JCK tests, 
					please use BUILD_LIST to include test folders you want to test." />
			</else>
		</if>
	</target>

	<target name="clean">
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" inheritAll="false" target="clean"></ant>
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build" inheritAll="false" target="clean"></ant>
	</target>
</project>
