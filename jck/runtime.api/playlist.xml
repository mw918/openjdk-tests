<?xml version="1.0" encoding="UTF-8"?>
<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->
<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../TestConfig/playlist.xsd">
	<include>../jck.mk</include>
	<test>
		<testCaseName>jck_custom</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=$(JCK_CUSTOM_TARGET),jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-instrument</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/instrument,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-invoke</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/invoke,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-reflect</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/reflect,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-Package</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/Package,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-String</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/String,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StringBuilder</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/StringBuilder,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StringBuffer</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/StringBuffer,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-ClassLoader</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/ClassLoader,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>
	<test>
		<testCaseName>jck-runtime-api-signaturetest</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/signaturetest,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<!-- Disabled on osx due to runtimes/infrastructure/issues/1111 -->
		<platformRequirements>^os.osx</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
	</test>	

	<test>
		<testCaseName>jck-runtime-api-java_lang-ModuleLayer</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/ModuleLayer,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-module</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/module,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-StackWalker</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/StackWalker,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-modulegraph</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/modulegraph,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_util-regex</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_util/regex,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-javax_naming-spi</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/javax_naming/spi,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<!-- Disabled on osx due to runtimes/infrastructure/issues/1111 -->
		<platformRequirements>^os.osx</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>9+</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>jck-runtime-api-java_lang-Module_class</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/Module_class,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>10+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-SecurityManager</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/SecurityManager,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>10+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_util-ResourceBundle</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_util/ResourceBundle,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>10+</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>jck-runtime-api-java_lang-constant</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/constant,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>12+</subset>
		</subsets>
	</test>
	<test>
	<testCaseName>jck-runtime-api-java_lang-Class</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>export JAVA_HOME=$(TEST_JDK_HOME)$(D)  $(AND_IF_SUCCESS) \
	perl $(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf$(D)stf.core$(D)scripts$(D)stf.pl  \
	-test-root=$(Q)$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)stf;$(TEST_RESROOT)$(D)..$(D)..$(D)system$(D)openjdk-systemtest$(Q) \
	-systemtest-prereqs=$(Q)$(JCK_ROOT)$(Q)  \
	-java-args-setup=$(Q)$(JVM_OPTIONS)$(Q) \
	-results-root=$(REPORTDIR)  \
	-test=Jck -test-args=$(Q)tests=api/java_lang/Class,jckRoot=$(JCK_ROOT),jckversion=$(JCK_VERSION),testsuite=RUNTIME$(Q); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>jck</group>
		</groups>
		<subsets>
			<subset>12+</subset>
		</subsets>
	</test>
</playlist>
